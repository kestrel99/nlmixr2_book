# Getting started with `rxode2`

## Introduction

`rxode2` is a set of R packages for solving and simulating from models based on ordinary differential equations (ODEs). These models are expressed in `rxode2`'s coding shorthand and subsequently compiled via C into dynamic link libraries optimized for speed. `rxode2` has several key components, split across several R packages (why this was done is complex, but boils down to CRAN objections to the time it took a single unified package to compile):

* `rxode2`: The core package
* `rxode2et`: Event table functions
* `rxode2parse`: The rxode2 parser
* `rxode2ll`: Log-likelihood functions for a wide range of statistical distributions
* `rxode2random`: Random-number generators for a wide range of statistical distributions

These should all have been installed automatically along with `nlmixr2`. We're going to start with `rxode2` because it forms the computational core of `nlmixr2`, and uses the same shorthand for specifying models.

## Writing models for `rxode2`

Writing models for `rxode2` (and by extension `nlmixr2`) is relatively straightforward. Here's a simple example.

```{r}
#|eval: false

library(rxode2)   # load the core rxode2 library

mod1 <- function() {
  ini({
    # central compartment
    KA   = 0.294  # /h
    CL   = 18.6   # L/h
    V2   = 40.2   # L
    
    # peripheral compartment
    Q    = 10.5   # L/h
    V3   = 297    # L
    
    # effects
    Kin  = 1      # Effect generation rate constant (/h)
    Kout = 1      # Effect elimination rate constant (/h)
    EC50 = 200    # EC50 (ug/ml)
  })
  model({
    C2          <- centr/V2   # concentration in the central compartment
    C3          <- peri/V3    # concentration in the peripheral compartment
    
    d/dt(depot) <- -KA*depot                         # depot compartment
    d/dt(centr) <-  KA*depot - CL*C2 - Q*C2 + Q*C3   # central compartment
    d/dt(peri)  <-                     Q*C2 - Q*C3   # peripheral compartment
    
    eff(0)      <- 1          # amount in the effect compartment at time 0
    d/dt(eff)   <- Kin - Kout*(1-C2/(EC50+C2))*eff   # effect compartment
  })
}
```

There's a lot to unpack here! An `rxode2` model specification consists of a series of one or more statements, optionally terminated by semicolons, and comments (delimited by # and an end-of-line). Comments are also optional.

### Model blocks

`rxode2` models are divided into two discrete blocks: `ini()`, which sets initial conditions, and `model()`, which defines the model and other aspects of the system that change with time. Blocks of statements are delimited by curly braces. The `ini()` section is pretty straightforward, as you see, with important variables in the system being assigned their starting values. You can also include a variety of other statements (such as conditionals, `while` loops and print commands) if you wish.

The `model()` block is where the action is. Here, as you might imagine, we define the model: the components of the system that change with the independent variable (often this is time). In our example, we are doing the following:

* Defining concentrations `C2` and `C3` in the central (`centr`) and peripheral (`peri`) PK compartments, respectively
* Defining the differential equations for the depot (`depot`), `centr`, `peri` and effect (`eff`) compartments
* Defining the starting amount in `eff` (1 at time 0)

### Making statements: `rxode2` nomenclature and syntax

Before we go any further, it's probably useful to spend a bit of time talking about assignments, nomenclature and syntax in `rxode2`. 

#### Assignments and operators

Assignment statements can be:

* simple assignments, in which the left-hand side is an identifier (a variable)
* time-derivative assignments, where the left-hand side specifies the change of the amount in the corresponding state variable (compartment) with respect to time, e.g. `d/dt(depot)`
* special initial-condition assignments in which the left-hand side specifies the compartment of the initial condition being specified, e.g. `depot(0) = 0`
* special model event changes such as bioavailability (e.g. `f(depot) = 1`), lag time (e.g. `alag(depot) = 0`), modeled rate (e.g. `rate(depot) = 2`) and modeled duration of infusion (e.g. `dur(depot) = 2`)
* change-point syntax, or modeled event times, e.g `mtime(var) = time`
* Jacobian-derivative assignments, in which the left hand specifies the change in the compartment ODE with respect to a variable. For example, if `d/dt(y) = dy`, then a Jacobian for this compartment can be specified as `df(y)/dy(dy) = 1`. There may be some advantage to obtaining the solution or specifying the Jacobian for very stiff ODE systems. However, for the few stiff systems we tried with LSODA, this actually slowed things down

Assignments can be made using `=`, `<-` or `~`. When using the `~` operator, simple assignments and time-derivative assignments will not be output.

Special statements can be:

* Compartment declaration statements, which can change the default dosing compartment and the assumed compartment number(s) as well as add extra compartment names at the end (useful for multiple-endpoint `nlmixr2` models); these can be specified using `cmt(compartmentName)`
* Parameter declaration statements, which can be used to ensure the input parameters are kept in a certain order instead of ordering the parameters by the order in which they are parsed. This is useful for keeping the parameter order the same when using different ODE models, for example (e.g. `param(par1, par2,...)`)

Expressions in assignment and in conditional (`if`) statements can be numeric or logical.

Numeric expressions can include the standard numeric operators (`+`, `-`, `*`, `/`, `^`) as well as mathematical functions defined in the C or the R math libraries (e.g. `fabs`, `exp`, `log`, `sin`, `abs`). You may also access R’s math functions, like `lgammafn` for the log gamma function.

`rxode2` syntax is case-sensitive, like the rest of R: `ABC` is different from `abc`, `Abc`, `ABc`, and so forth.

#### Identifiers

As in R, identifiers (variable names) may consist of one or more alphanumeric, underscore (`_`) or period (`.`) characters, although the first character cannot be a digit or underscore.

Identifiers in a model specification can take the following forms:

* State variables in the dynamic system (e.g. compartments in a pharmacokinetics model)
* Implied input variable, `t` (time), `tlast` (last time point), and `podo` (oral dose, in the case of absorption transit models)
* Special constants such as `pi` or R’s predefined constants
* Model parameters (such as rate of absorption and clearance)
* Other left-hand side (LHS) variables created by assignments as part of the model specification

Currently, the `rxode2` modeling language only recognizes system state variables and parameters. Any values that need to be passed from R to the ODE model (such as covariates) must be passed in the `params` argument of the integrator function (`rxSolve()`) or be available in the supplied event dataset, which we'll get to in a bit.

Some variable names are reserved for use in `rxode2` event tables. The following items cannot be assigned, or used as a state, but can be accessed in the `rxode2` code:

* `cmt`: compartment
* `dvid`: dependent variable ID
* `addl`: number of additional doses
* `ss`: steady state
* `rate`: infusion rate
* `id`: unique subject identifier

The following variables, however, cannot be used in a model specification in any way:

* `evid`: event type
* `ii`: interdose interval

Sometimes rxode2 generates variables that are fed back to rxode2. Similarly, nlmixr generates some variables that are used in nlmixr estimation and simulation. These variables start with the either the rx or nlmixr prefixes. To avoid any problems, it is suggested to not use these variables starting with either the rx or nlmixr prefixes.

Logical Operators
Logical operators support the standard R operators ==, != >= <= > and <. Like R these can be in if() or while() statements, ifelse() expressions. Additionally they can be in a standard assignment. For instance, the following is valid:

cov1 = covm*(sexf == "female") + covm*(sexf != "female")
Notice that you can also use character expressions in comparisons. This convenience comes at a cost since character comparisons are slower than numeric expressions. Unlike R, as.numeric or as.integer for these logical statements is not only not needed, but will cause an syntax error if you try to use the function.

Interface and data handling between R and the generated C code
Users specify which variables are the dynamic system’s state variables via the d/dt(identifier) operator as part of the model specification, and which are model parameters via the params= argument in rxode2 solve() method:

m1 <- rxode2(model = ode, modName = "m1")

# model parameters -- a named vector is required
theta <- 
   c(KA=0.29, CL=18.6, V2=40.2, Q=10.5, V3=297, Kin=1, Kout=1, EC50=200)

# state variables and their amounts at time 0 (the use of names is
# encouraged, but not required)
inits <- c(depot=0, centr=0, peri=0, eff=1)

# qd1 is an eventTable specification with a set of dosing and sampling 
# records (code not shown here)

solve(theta, event = qd1, inits = inits)
The values of these variables at pre-specified time points are saved during model fitting/integration and returned as part of the fitted values (see the function eventTable, in particular its member function add.sampling function to define a set of time points when to capture the values of these variables) and returned as part of the modeling output.

The ODE specification mini-language is parsed with the help of the open source tool DParser, Plevyak (2015).

Supported functions
All the supported functions in rxode2 can be seen with the rxSupportedFuns().

A brief description of the built-in functions are in the following table:




    rxode2() which creates the C code for fast ODE solving based on a simple syntax related to Leibnitz notation.
    The event data, which can be:
        a NONMEM or deSolve compatible data frame, or
        created with et() or eventTable() for easy simulation of events
        The data frame can be augmented by adding time-varying or adding individual covariates (iCov= as needed)
    rxSolve() which solves the system of equations using initial conditions and parameters to make predictions
        With multiple subject data, this may be parallelized.
        With single subject the output data frame is adaptive
        Covariances and other metrics of uncertanty can be used to simulate while solving
